'use strict';

var app = angular.module('Battlecruiser', ['ui.router']);

app.config(function ($urlRouterProvider, $locationProvider) {
   // This turns off hashbang urls (/#about) and changes it to something normal (/about)
   $locationProvider.html5Mode(true);
   // If we go to a URL that ui-router doesn't have registered, go to the "/" url.
   $urlRouterProvider.otherwise('/');
});
'use strict';

app.directive('gameboard', function () {
	return {
		templateUrl: '/pre-build/board/board.html',
		restrict: 'E',
		scope: false
	};
});
'use strict';

app.factory('boardFactory', function ($http) {
	return {
		createGame: function createGame() {
			return $http.post('/api/game').then(function (res) {
				return res.data;
			});
		},
		playerSetup: function playerSetup(positionsArray) {
			return $http.put('/api/game/setup', { positionsArray: positionsArray }).then(function (res) {
				return res.data;
			});
		},
		playerMove: function playerMove(position) {
			return $http.put('/api/game/player', { position: position }).then(function (res) {
				return res.data;
			});
		},
		getCpuMove: function getCpuMove() {
			return $http.get('/api/game/cpu').then(function (res) {
				return res.data;
			});
		},
		deleteGame: function deleteGame() {
			return $http['delete']('/api/game').then(function (res) {
				return res.data;
			});
		}
	};
});
'use strict';

app.controller('HomeController', function ($scope, boardFactory) {
	$scope.EMPTY = 0;
	$scope.SHIP = 1;
	$scope.HIT = 2;
	$scope.MISS = 3;

	function isInArray(array, x, y) {
		return _.findIndex(array, { 'x': x, 'y': y });
	}

	$scope.positionSelected = function () {
		return isInArray($scope.positionsArray, this.$parent.$index, this.$index) > -1;
	};

	$scope.createBoards = function () {
		boardFactory.createGame().then(function (response) {
			$scope.game = response.game;
			$scope.positionsArray = [];
		});
	};

	$scope.submitPositions = function () {
		boardFactory.playerSetup($scope.positionsArray).then(function (response) {
			$scope.positionsArray = null;
			$scope.game = response.game;
		});
	};

	$scope.deleteGame = function () {
		boardFactory.deleteGame().then(function (response) {
			$scope.game = null;
			$scope.createBoards();
		});
	};

	$scope.selectPosition = function (x, y) {
		var index = isInArray($scope.positionsArray, x, y);
		//undo position selection if previously selected
		if (index > -1 && $scope.game.status === 'setup') {
			return $scope.positionsArray.splice(index, 1);
		}

		if ($scope.positionsArray && $scope.positionsArray.length < 10 && $scope.game.status === 'setup') {
			$scope.positionsArray.push({ 'x': x, 'y': y });
		}
	};

	$scope.submitPositions = function () {
		boardFactory.playerSetup($scope.positionsArray).then(function (response) {
			$scope.positionsArray = null;
			$scope.game = response.game;
		});
	};

	$scope.attackCPU = function (status, x, y) {
		//prevent selecting previously attacked positions
		if ($scope.game.status === 'playing' && $scope.game.currentPlayer === 'person' && (status === $scope.EMPTY || status === $scope.SHIP)) {
			boardFactory.playerMove({ 'x': x, 'y': y }).then(function (response) {
				$scope.game = response.game;
			});
		}
	};

	$scope.allowAttack = function () {
		boardFactory.getCpuMove().then(function (response) {
			$scope.game = response.game;
		});
	};
});
'use strict';

app.config(function ($stateProvider) {
    $stateProvider.state('home', {
        url: '/',
        templateUrl: '/pre-build/home/home.html',
        controller: 'HomeController'
    });
});
//# sourceMappingURL=data:application/json;base64,
